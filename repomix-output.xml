<repomix>This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2025-03-12T16:57:11.961Z<directory_structure>cloud-formation-servers.yml
cloud-formation-vpc.yaml</directory_structure><files>This section contains the contents of the repository&apos;s files.<file path="cloud-formation-servers.yml">AWSTemplateFormatVersion: &quot;2010-09-09&quot;
Description: &quot;Template Cloud Formation pour creation de serveurs&quot;

Parameters:
  NetworkStackName:
    Type: String
    Description: &quot;Nom du stack réseau CloudFormation&quot;

  KeyPairName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: &quot;Nom de la clé SSH pour la connexion aux instances&quot;

  S3BucketScripts:
    Type: String
    Description: &quot;Nom du bucket S3 contenant les scripts d&apos;installation&quot;
    Default: &quot;menugraphique-2025-h24-4&quot;

  DBUser:
    Type: String
    Description: &quot;Nom d&apos;utilisateur de la base de données&quot;
    MinLength: 3
    AllowedPattern: &quot;^[a-zA-Z0-9]+$&quot;

  DBRootPassword:
    Type: String
    Description: &quot;Mot de passe root de la base de données&quot;
    NoEcho: true
    MinLength: 8
    AllowedPattern: &quot;^(?=.*[a-z])(?=.*[A-Z])(?=.*\\W).*$&quot;

  License:
    Type: String
    Description: &quot;Licence de serveur MenuGraphique&quot;
    MinLength: 129
    MaxLength: 129

Resources:
  DbSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for Database server
      VpcId: !ImportValue
        Fn::Sub: &quot;${NetworkStackName}-VpcId&quot;
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub &quot;${NetworkStackName}-DbSG&quot;
        - Key: Layer
          Value: &quot;bd&quot;

  LicenseSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for Database server
      VpcId: !ImportValue
        Fn::Sub: &quot;${NetworkStackName}-VpcId&quot;
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub &quot;${NetworkStackName}-DbSG&quot;
        - Key: Layer
          Value: &quot;bd&quot;

  DbLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: !Sub &quot;${NetworkStackName}-DbLaunchTemplate&quot;
      LaunchTemplateData:
        ImageId: ami-0c7217cdde317cfec
        InstanceType: t2.micro
        KeyName: !Ref KeyPairName
        SecurityGroupIds:
          - !Ref DbSecurityGroup
        IamInstanceProfile:
          Name: &quot;LabInstanceProfile&quot;
        UserData:
          Fn::Base64: !Sub |
            export DBRootPassword=&quot;${DBRootPassword}&quot;
            export DBUser=&quot;${DBUser}&quot;

            LOGFILE=&quot;/var/log/webserver_install.log&quot;
            exec &gt; &gt;(tee -a &quot;$LOGFILE&quot;) 2&gt;&amp;1
            echo &quot;=== Starting webserver installation script at $(date) ===&quot;

            sudo dnf update -y
            sudo dnf install mariadb105-server -y

            # Download configuration and setup files from S3
            sudo aws s3 cp s3://menugraphique-2025-h24-4/db-files/db.setup /tmp/db.setup
            sudo aws s3 cp s3://menugraphique-2025-h24-4/db-files/mariadb-server.cnf /tmp/mariadb-server.cnf

            # Move the config file to the correct location
            sudo mv /tmp/mariadb-server.cnf /etc/my.cnf.d/mariadb-server.cnf

            # Enable and start MariaDB
            sudo systemctl enable mariadb
            sudo systemctl start mariadb

            # Set root password
            sudo mysqladmin -u root password &quot;${DBRootPassword}&quot;

            # Execute SQL setup
            mysql -u root --password=&quot;${DBRootPassword}&quot; &lt; /tmp/db.setup

            # Clean up
            rm /tmp/db.setup

            # Restart MariaDB
            sudo systemctl restart mariadb

  LicenseLauchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: !Sub &quot;${NetworkStackName}-DbLaunchTemplate&quot;
      LaunchTemplateData:
        ImageId: ami-0c7217cdde317cfec
        InstanceType: t2.micro
        KeyName: !Ref KeyPairName
        SecurityGroupIds:
          - !Ref DbSecurityGroup
        IamInstanceProfile:
          Name: &quot;LabInstanceProfile&quot;
        UserData:
          Fn::Base64: !Sub |
            export DBRootPassword=&quot;${DBRootPassword}&quot;
            export DBUser=&quot;${DBUser}&quot;

  DbInstance:
    Type: AWS::EC2::Instance
    Properties:
      LaunchTemplate:
        LaunchTemplateId: !Ref DbLaunchTemplate
        Version: !GetAtt DbLaunchTemplate.LatestVersionNumber
      SubnetId: !ImportValue
        Fn::Sub: &quot;${NetworkStackName}-PrivateSubnetId&quot;
      Tags:
        - Key: Name
          Value: !Sub &quot;${NetworkStackName}-DbServer&quot;
        - Key: Project
          Value: !ImportValue
            Fn::Sub: &quot;${NetworkStackName}-ProjectName&quot;
        - Key: Layer
          Value: &quot;bd&quot;

  SercureServer:
    Type: AWS::EC2::Instance
    Properties:
      LaunchTemplate:
        LaunchTemplateId: !Ref DbLaunchTemplate
        Version: !GetAtt DbLaunchTemplate.LatestVersionNumber
      SubnetId: !ImportValue
        Fn::Sub: &quot;${NetworkStackName}-PrivateSubnetId&quot;
      Tags:
        - Key: Name
          Value: !Sub &quot;${NetworkStackName}-DbServer&quot;
        - Key: Project
          Value: !ImportValue
            Fn::Sub: &quot;${NetworkStackName}-ProjectName&quot;
        - Key: Layer
          Value: &quot;bd&quot;

Outputs:
  DbServerPrivateIP:
    Description: &quot;Adresse IP privée du serveur de base de données&quot;
    Value: !GetAtt DbInstance.PrivateIp

  DbSecurityGroupId:
    Description: &quot;ID du groupe de sécurité de la base de données&quot;
    Value: !Ref DbSecurityGroup</file><file path="cloud-formation-vpc.yaml">AWSTemplateFormatVersion: &quot;2010-09-09&quot;
Description: &quot;Création d&apos;un VPC avec sous-réseaux et une instance NAT&quot;

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: &quot;Project Configuration&quot;
        Parameters:
          - ProjectName
          - EnvironmentType
      - Label:
          default: &quot;Network Configuration&quot;
        Parameters:
          - VpcCidr
          - AvailabilityZones

    ParameterLabels:
      ProjectName:
        default: &quot;Project Name&quot;
      EnvironmentType:
        default: &quot;Environment Type&quot;
      VpcCidr:
        default: &quot;VPC CIDR Block&quot;
      SubnetBits:
        default: &quot;Subnet Bits for Instance Identification&quot;
      AvailabilityZone:
        default: &quot;Availability Zones&quot;

Parameters:
  ProjectName:
    Type: String
    Description: &quot;Nom du projet&quot;
    MinLength: 3
    MaxLength: 100
    AllowedPattern: &quot;^[a-zA-Z0-9]+$&quot;
    Default: test

  EnvironmentType:
    Type: String
    Description: &quot;Type d’environnement (Test ou Prod)&quot;
    AllowedValues:
      - Test
      - Prod
    Default: Test

  VpcCidr:
    Type: String
    Description: &quot;Plage CIDR du VPC&quot;
    Default: &quot;10.0.0.0/16&quot;

  KeyPairName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: &quot;Nom de la clé SSH&quot;

  AvailabilityZone:
    Type: AWS::EC2::AvailabilityZone::Name
    Description: &quot;Zone de disponibilite&quot;

  SubnetBits:
    Type: Number
    Description: &quot;Number of bits to identify instances (between 4 and 16)&quot;
    MinValue: 4
    MaxValue: 16
    Default: 8
    ConstraintDescription: &quot;Value must be between 4 and 16&quot;

Conditions:
  isProd: !Equals
    - !Ref EnvironmentType
    - prod

Resources:
  MyVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock:
        Ref: VpcCidr
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Sub &quot;${ProjectName}-VPC&quot;

  InternetGateway:
    Type: AWS::EC2::InternetGateway

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref MyVPC
      InternetGatewayId: !Ref InternetGateway

  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: !Select [0, !Cidr [!Ref VpcCidr, 4, !Ref SubnetBits]]
      AvailabilityZone: !Ref AvailabilityZone
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub &quot;${ProjectName}-PublicSubnet&quot;

  PrivateSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: !Select [1, !Cidr [!Ref VpcCidr, 4, !Ref SubnetBits]]
      AvailabilityZone: !Ref AvailabilityZone
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub &quot;${ProjectName}-PrivateSubnet&quot;

  JumpBoxSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for the Jump Box
      VpcId: !Ref MyVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub &quot;${ProjectName}-${EnvironmentType}-JumpBoxSG&quot;
        - Key: Environment
          Value: !Ref EnvironmentType
        - Key: Project
          Value: !Ref ProjectName

  NATInstance:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: &quot;https://menugraphique-2025-h24-4.s3.us-east-1.amazonaws.com/natInstance.json&quot;
      Parameters:
        VpcId: !Ref MyVPC
        PublicSubnetId: !Ref PublicSubnet
        PrivatesSubnetsID: !Ref PrivateSubnet
        KeyPairName: !Ref KeyPairName

Outputs:
  VpcId:
    Description: &quot;ID du VPC créé&quot;
    Value: !Ref MyVPC
    Export:
      Name: !Sub &quot;${AWS::StackName}-VpcId&quot;

  PublicSubnetId:
    Description: &quot;ID du sous-réseau public&quot;
    Value: !Ref PublicSubnet
    Export:
      Name: !Sub &quot;${AWS::StackName}-PublicSubnetId&quot;

  PrivateSubnetId:
    Description: &quot;ID du sous-réseau privé&quot;
    Value: !Ref PrivateSubnet
    Export:
      Name: !Sub &quot;${AWS::StackName}-PrivateSubnetId&quot;

  ProjectNameOutput:
    Description: &quot;Nom du projet&quot;
    Value: !Ref ProjectName
    Export:
      Name: !Sub &quot;${AWS::StackName}-ProjectName&quot;

  EnvironmentTypeOutput:
    Description: &quot;Type d&apos;environnement&quot;
    Value: !Ref EnvironmentType
    Export:
      Name: !Sub &quot;${AWS::StackName}-EnvironmentType&quot;</file></files></repomix>